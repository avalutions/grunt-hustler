// Generated by CoffeeScript 1.3.3
/*global module, require
*/

module.exports = function(grunt) {
  var compileLessFile, fs, less, path, processLessFiles;
  fs = require('fs');
  less = require('less');
  path = require('path');
  compileLessFile = function(source, callback) {
    var dir, parser;
    dir = path.dirname(source);
    parser = new less.Parser({
      paths: [dir],
      filename: source
    });
    return fs.readFile(source, 'utf8', function(err, data) {
      if (err) {
        callback(err);
      }
      return parser.parse(data, function(err, tree) {
        var css;
        if (err) {
          callback(err);
        }
        css = null;
        try {
          css = tree.toCSS();
        } catch (e) {
          return callback(e);
        }
        return callback(null, css);
      });
    });
  };
  processLessFiles = function(srcFiles, callback) {
    return grunt.utils.async.map(srcFiles, compileLessFile, function(err, results) {
      if (err) {
        return callback(err);
      }
      return callback(null, results.join(grunt.utils.linefeed));
    });
  };
  grunt.registerHelper('hustler less', function(config) {
    var dest, done, groups, normalized, sourceContents, src, _results;
    done = config.async();
    normalized = grunt.helper('hustler normalizeFiles', config);
    groups = normalized.groups;
    _results = [];
    for (dest in groups) {
      src = groups[dest];
      sourceContents = [];
      _results.push(processLessFiles(src, function(err, css) {
        var destination;
        if (err) {
          grunt.log.error(err);
          return done(false);
        }
        destination = dest.replace('.less', '.css');
        grunt.file.write(destination, css);
        grunt.verbose.ok("" + src + " -> " + destination);
        return done();
      }));
    }
    return _results;
  });
  return grunt.registerMultiTask('less', 'Compile LESS to CSS', function() {
    return grunt.helper('hustler less', this);
  });
};
