// Generated by CoffeeScript 1.3.3
/*global module, require
*/

module.exports = function(grunt) {
  var path;
  path = require('path');
  return grunt.registerHelper('hustler normalizeFiles', function(config) {
    var data, dest, destExt, dirs, files, groups, inDest, inFileDest, inFileSrc, inFiles, inSrc, isDestADirectory, isIndexed, src;
    config = grunt.utils.recurse(config, function(prop) {
      if (typeof prop !== 'string') {
        return prop;
      }
      return grunt.template.process(prop);
    });
    data = config.data;
    inDest = data.dest;
    inSrc = data.src;
    inFiles = data.files;
    files = {};
    dirs = {};
    groups = {};
    isIndexed = false;
    if (inFiles) {
      if (Array.isArray(inFiles)) {
        isIndexed = true;
        inFiles.forEach(function(inFileSrc, index) {
          if (!Array.isArray(inFileSrc)) {
            inFileSrc = [inFileSrc];
          }
          return files[index] = inFileSrc;
        });
      } else {
        for (inFileDest in inFiles) {
          inFileSrc = inFiles[inFileDest];
          inFileDest = path.relative('./', inFileDest);
          if (!Array.isArray(inFileSrc)) {
            inFileSrc = [inFileSrc];
          }
          files[inFileDest] = inFileSrc;
        }
      }
    }
    if (inSrc) {
      if (!Array.isArray(inSrc)) {
        inSrc = [inSrc];
      }
    }
    if (inDest && inSrc) {
      inDest = path.relative('./', inDest);
      files[inDest] = inSrc;
    }
    if (inSrc && !(inDest != null)) {
      isIndexed = true;
      files[0] = inSrc;
    }
    if (files) {
      for (dest in files) {
        src = files[dest];
        destExt = path.extname(dest);
        isDestADirectory = destExt.length === 0 && !isIndexed;
        src.forEach(function(source) {
          var isSourceADirectory, sourceExt, sourceFiles;
          sourceExt = path.extname(source);
          isSourceADirectory = sourceExt.length === 0;
          if (isSourceADirectory) {
            source = path.join(source, '/**/*.*');
          }
          sourceFiles = grunt.file.expandFiles(source);
          return sourceFiles.forEach(function(sourceFile) {
            var absoluteDestination, cleanSource, destination, relative, sourceDirectory;
            if (isDestADirectory) {
              sourceDirectory = path.dirname(source.replace('**', ''));
              if (sourceFile.indexOf('//') === 0) {
                relative = sourceFile.substr(sourceDirectory.length);
              } else {
                relative = path.relative(sourceDirectory, sourceFile);
              }
              absoluteDestination = path.resolve(dest, relative);
              destination = path.relative('./', absoluteDestination);
            } else {
              destination = dest;
            }
            if (isSourceADirectory) {
              cleanSource = source.replace('/**/*.*', '/').replace('\\**\\*.*', '\\');
              if (!dirs[cleanSource]) {
                dirs[cleanSource] = [];
              }
              dirs[cleanSource].push(sourceFile);
            }
            if (!groups[destination]) {
              groups[destination] = [];
            }
            return groups[destination].push(sourceFile);
          });
        });
      }
    }
    return {
      dirs: dirs,
      groups: groups
    };
  });
};
