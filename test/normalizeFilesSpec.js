// Generated by CoffeeScript 1.3.3
var createFile, deleteDirectory, from, fs, grunt, rimraf, temp, to;

grunt = require('grunt');

rimraf = require('rimraf');

fs = require('fs');

createFile = grunt.file.write;

deleteDirectory = rimraf.sync;

temp = './temp/';

from = "" + temp + "from/";

to = "" + temp + "to/";

exports['src'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(2);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    data = {
      data: {
        src: "" + from + "a.coffee"
      }
    };
    groups = {
      '0': ['temp/from/a.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['src array'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(3);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    data = {
      data: {
        src: ["" + from + "a.coffee", "" + from + "b.coffee"]
      }
    };
    groups = {
      '0': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['src array with file matches'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    createFile("" + from + "c.html", '');
    createFile("" + from + "d.html", '');
    createFile("" + from + "e.txt", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized, unSorted;
    test.expect(6);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    test.equal(true, fs.existsSync("" + from + "c.html", 'should find c.html'));
    test.equal(true, fs.existsSync("" + from + "d.html", 'should find d.html'));
    test.equal(true, fs.existsSync("" + from + "e.txt", 'should find e.txt'));
    data = {
      data: {
        src: ["" + from + "a.coffee", "" + from + "b.coffee", "" + from + "**/*.html"]
      }
    };
    groups = {
      '0': ['temp/from/a.coffee', 'temp/from/b.coffee', 'temp/from/c.html', 'temp/from/d.html']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    unSorted = normalized.groups['0'];
    normalized.groups['0'] = unSorted.sort();
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['src array with file matches and non-existent src'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    createFile("" + from + "c.html", '');
    createFile("" + from + "d.html", '');
    createFile("" + from + "e.txt", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized, unSorted;
    test.expect(7);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    test.equal(true, fs.existsSync("" + from + "c.html", 'should find c.html'));
    test.equal(true, fs.existsSync("" + from + "d.html", 'should find d.html'));
    test.equal(true, fs.existsSync("" + from + "e.txt", 'should find e.txt'));
    test.equal(false, fs.existsSync("" + from + "nothere.log", 'should not find nothere.log'));
    data = {
      data: {
        src: ["" + from + "a.coffee", "" + from + "b.coffee", "" + from + "**/*.html", "" + from + "nothere.log"]
      }
    };
    groups = {
      '0': ['temp/from/a.coffee', 'temp/from/b.coffee', 'temp/from/c.html', 'temp/from/d.html']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    unSorted = normalized.groups['0'];
    normalized.groups['0'] = unSorted.sort();
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(2);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    data = {
      data: {
        dest: "" + to + "a.js",
        src: "" + from + "a.coffee"
      }
    };
    groups = {
      'temp/to/a.js': ['temp/from/a.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src with non-existent src'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(2);
    test.equal(false, fs.existsSync("" + from + "a.coffee", 'should not find a.coffee'));
    data = {
      data: {
        dest: "" + to + "a.js",
        src: "" + from + "a.coffee"
      }
    };
    groups = {};
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src with file matches'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized, unSorted;
    test.expect(3);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    data = {
      data: {
        dest: "" + to + "min.js",
        src: "" + from + "**/*.coffee"
      }
    };
    groups = {
      'temp/to/min.js': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    unSorted = normalized.groups['temp/to/min.js'];
    normalized.groups['temp/to/min.js'] = unSorted.sort();
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src array'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(3);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    data = {
      data: {
        dest: "" + to + "min.js",
        src: ["" + from + "a.coffee", "" + from + "b.coffee"]
      }
    };
    groups = {
      'temp/to/min.js': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src array with file matches'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    createFile("" + from + "sub/c.coffee", '');
    createFile("" + from + "sub/d.coffee", '');
    createFile("" + from + "sub/e.html", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized, unSorted;
    test.expect(6);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/c.coffee", 'should find sub/c.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/d.coffee", 'should find sub/d.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/e.html", 'should find sub/e.html'));
    data = {
      data: {
        dest: "" + to + "min.js",
        src: ["" + from + "a.coffee", "" + from + "b.coffee", "" + from + "sub/**/*.coffee"]
      }
    };
    groups = {
      'temp/to/min.js': ['temp/from/a.coffee', 'temp/from/b.coffee', 'temp/from/sub/c.coffee', 'temp/from/sub/d.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    unSorted = normalized.groups['temp/to/min.js'];
    normalized.groups['temp/to/min.js'] = unSorted.sort();
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src array with non-existent src'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(4);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    test.equal(false, fs.existsSync("" + from + "c.coffee", 'should not find c.coffee'));
    data = {
      data: {
        dest: "" + to + "min.js",
        src: ["" + from + "a.coffee", "" + from + "b.coffee", "" + from + "c.coffee"]
      }
    };
    groups = {
      'temp/to/min.js': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src where dest is a directory'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b/b.coffee", '');
    createFile("" + from + "sub/c/c.coffee", '');
    createFile("" + from + "sub/d/d.coffee", '');
    createFile("" + from + "html/a.html", '');
    createFile("" + from + "html/b.html", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(7);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b/b.coffee", 'should find b.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/c/c.coffee", 'should find c.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/d/d.coffee", 'should find d.coffee'));
    test.equal(true, fs.existsSync("" + from + "html/a.html", 'should find a.html'));
    test.equal(true, fs.existsSync("" + from + "html/b.html", 'should find b.html'));
    data = {
      data: {
        dest: "" + to,
        src: ["" + from + "a.coffee", "" + from + "b/b.coffee", "" + from + "sub/**/*.coffee", "" + from + "**/*.html"]
      }
    };
    groups = {
      'temp/to/a.coffee': ['temp/from/a.coffee'],
      'temp/to/b.coffee': ['temp/from/b/b.coffee'],
      'temp/to/c/c.coffee': ['temp/from/sub/c/c.coffee'],
      'temp/to/d/d.coffee': ['temp/from/sub/d/d.coffee'],
      'temp/to/html/a.html': ['temp/from/html/a.html'],
      'temp/to/html/b.html': ['temp/from/html/b.html']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['dest and src where src is a directory'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(3);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    data = {
      data: {
        dest: "" + to + "min.js",
        src: "" + from
      }
    };
    groups = {
      'temp/to/min.js': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['src where src is a directory'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, dirs, groups, normalized;
    test.expect(4);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    data = {
      data: {
        src: "" + from
      }
    };
    dirs = {
      'temp/from/': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    groups = {
      '0': ['temp/from/a.coffee', 'temp/from/b.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.dirs, dirs);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['files with source and destination'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    createFile("" + from + "sub/c.coffee", '');
    createFile("" + from + "sub/d.coffee", '');
    createFile("" + from + "sub2/e.coffee", '');
    createFile("" + from + "sub2/f.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(7);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/c.coffee", 'should find c.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/d.coffee", 'should find d.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub2/e.coffee", 'should find e.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub2/f.coffee", 'should find f.coffee'));
    data = {
      data: {
        files: {
          './temp/to/a.js': './temp/from/a.coffee',
          './temp/to/b.js': './temp/from/b.coffee',
          './temp/to/sub.min.js': './temp/from/sub/**/*.coffee',
          './temp/to/sub2.min.js': ['./temp/from/sub2/e.coffee', './temp/from/sub2/f.coffee']
        }
      }
    };
    groups = {
      'temp/to/a.js': ['temp/from/a.coffee'],
      'temp/to/b.js': ['temp/from/b.coffee'],
      'temp/to/sub.min.js': ['temp/from/sub/c.coffee', 'temp/from/sub/d.coffee'],
      'temp/to/sub2.min.js': ['temp/from/sub2/e.coffee', 'temp/from/sub2/f.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};

exports['files with source'] = {
  setUp: function(callback) {
    deleteDirectory(temp);
    createFile("" + from + "a.coffee", '');
    createFile("" + from + "b.coffee", '');
    createFile("" + from + "sub/c.coffee", '');
    createFile("" + from + "sub/d.coffee", '');
    createFile("" + from + "sub2/e.coffee", '');
    createFile("" + from + "sub2/f.coffee", '');
    return callback();
  },
  tearDown: function(callback) {
    deleteDirectory(temp);
    return callback();
  },
  main: function(test) {
    var data, groups, normalized;
    test.expect(7);
    test.equal(true, fs.existsSync("" + from + "a.coffee", 'should find a.coffee'));
    test.equal(true, fs.existsSync("" + from + "b.coffee", 'should find b.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/c.coffee", 'should find c.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub/d.coffee", 'should find d.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub2/e.coffee", 'should find e.coffee'));
    test.equal(true, fs.existsSync("" + from + "sub2/f.coffee", 'should find f.coffee'));
    data = {
      data: {
        files: ['./temp/from/a.coffee', './temp/from/b.coffee', './temp/from/sub/**/*.coffee', ['./temp/from/sub2/e.coffee', './temp/from/sub2/f.coffee']]
      }
    };
    groups = {
      '0': ['temp/from/a.coffee'],
      '1': ['temp/from/b.coffee'],
      '2': ['temp/from/sub/c.coffee', 'temp/from/sub/d.coffee'],
      '3': ['temp/from/sub2/e.coffee', 'temp/from/sub2/f.coffee']
    };
    normalized = grunt.helper('hustler normalizeFiles', data);
    test.deepEqual(normalized.groups, groups);
    return test.done();
  }
};
